{
  "address": "0xE0CA62c7489D21290dd584649A465bcb74a3C37A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readStore2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "store",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3a6f3d6009b51f4395626000f3f79cb0f9b0455d40b1be93cbf3fabc850c97e",
  "receipt": {
    "to": null,
    "from": "0x6A60495E3c5345D8Bbf1CE04B20B93edE0d7d84C",
    "contractAddress": "0xE0CA62c7489D21290dd584649A465bcb74a3C37A",
    "transactionIndex": 8,
    "gasUsed": "334441",
    "logsBloom": "0x
    "blockHash": "0xa559a2b8ab2a141e0ebde28a3e949313cecf7aa9bf243c5f63ba0737e2582a82",
    "transactionHash": "0xf3a6f3d6009b51f4395626000f3f79cb0f9b0455d40b1be93cbf3fabc850c97e",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 47006743,
        "transactionHash": "0xf3a6f3d6009b51f4395626000f3f79cb0f9b0455d40b1be93cbf3fabc850c97e",
        "address": "0xE0CA62c7489D21290dd584649A465bcb74a3C37A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a60495e3c5345d8bbf1ce04b20b93ede0d7d84c"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xa559a2b8ab2a141e0ebde28a3e949313cecf7aa9bf243c5f63ba0737e2582a82"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 47006743,
        "transactionHash": "0xf3a6f3d6009b51f4395626000f3f79cb0f9b0455d40b1be93cbf3fabc850c97e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006a60495e3c5345d8bbf1ce04b20b93ede0d7d84c",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000001c8422b81470000000000000000000000000000000000000000000000000003f91d70c180f6ca0000000000000000000000000000000000000000000001edafece62c87ba545a00000000000000000000000000000000000000000000000003f7552e95ffafca0000000000000000000000000000000000000000000001edafeeae6eb33b9b5a",
        "logIndex": 21,
        "blockHash": "0xa559a2b8ab2a141e0ebde28a3e949313cecf7aa9bf243c5f63ba0737e2582a82"
      }
    ],
    "blockNumber": 47006743,
    "cumulativeGasUsed": "1305862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6A60495E3c5345D8Bbf1CE04B20B93edE0d7d84C"
  ],
  "numDeployments": 1,
  "solcInputHash": "bd7dda06b24f2f6437e37917cf263716",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readStore2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Test1.sol\":\"Test1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Test1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Test1 is Ownable {\\r\\n\\r\\n    constructor(address initialOwner)\\r\\n        Ownable(initialOwner)\\r\\n    {}\\r\\n\\r\\n    uint256 storedValue;\\r\\n\\r\\n    function store(uint256 value) external {\\r\\n        storedValue = value;\\r\\n    }\\r\\n\\r\\n    function readStore2() external view returns(uint256) {\\r\\n        return storedValue;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8f1ef42c2f7c7382eb7859986d66663d8d8c266d4fef6db74a24b364cc4ba703\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106c93803806106c9833981810160405281019061003291906101e2565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c919061021e565b60405180910390fd5b6100b4816100bb60201b60201c565b5050610239565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101af82610184565b9050919050565b6101bf816101a4565b81146101ca57600080fd5b50565b6000815190506101dc816101b6565b92915050565b6000602082840312156101f8576101f761017f565b5b6000610206848285016101cd565b91505092915050565b610218816101a4565b82525050565b6000602082019050610233600083018461020f565b92915050565b610481806102486000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632fd641e01461005c5780636057361d1461007a578063715018a6146100965780638da5cb5b146100a0578063f2fde38b146100be575b600080fd5b6100646100da565b604051610071919061031d565b60405180910390f35b610094600480360381019061008f9190610369565b6100e4565b005b61009e6100ee565b005b6100a8610102565b6040516100b591906103d7565b60405180910390f35b6100d860048036038101906100d3919061041e565b61012b565b005b6000600154905090565b8060018190555050565b6100f66101b1565b6101006000610238565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101336101b1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161019c91906103d7565b60405180910390fd5b6101ae81610238565b50565b6101b96102fc565b73ffffffffffffffffffffffffffffffffffffffff166101d7610102565b73ffffffffffffffffffffffffffffffffffffffff1614610236576101fa6102fc565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161022d91906103d7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61031781610304565b82525050565b6000602082019050610332600083018461030e565b92915050565b600080fd5b61034681610304565b811461035157600080fd5b50565b6000813590506103638161033d565b92915050565b60006020828403121561037f5761037e610338565b5b600061038d84828501610354565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103c182610396565b9050919050565b6103d1816103b6565b82525050565b60006020820190506103ec60008301846103c8565b92915050565b6103fb816103b6565b811461040657600080fd5b50565b600081359050610418816103f2565b92915050565b60006020828403121561043457610433610338565b5b600061044284828501610409565b9150509291505056fea2646970667358221220422ef2b6ba27ca9db2b68738685adc9c9905dc5ac9a0f6a8892b58efcb50edc064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80632fd641e01461005c5780636057361d1461007a578063715018a6146100965780638da5cb5b146100a0578063f2fde38b146100be575b600080fd5b6100646100da565b604051610071919061031d565b60405180910390f35b610094600480360381019061008f9190610369565b6100e4565b005b61009e6100ee565b005b6100a8610102565b6040516100b591906103d7565b60405180910390f35b6100d860048036038101906100d3919061041e565b61012b565b005b6000600154905090565b8060018190555050565b6100f66101b1565b6101006000610238565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101336101b1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161019c91906103d7565b60405180910390fd5b6101ae81610238565b50565b6101b96102fc565b73ffffffffffffffffffffffffffffffffffffffff166101d7610102565b73ffffffffffffffffffffffffffffffffffffffff1614610236576101fa6102fc565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161022d91906103d7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61031781610304565b82525050565b6000602082019050610332600083018461030e565b92915050565b600080fd5b61034681610304565b811461035157600080fd5b50565b6000813590506103638161033d565b92915050565b60006020828403121561037f5761037e610338565b5b600061038d84828501610354565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103c182610396565b9050919050565b6103d1816103b6565b82525050565b60006020820190506103ec60008301846103c8565b92915050565b6103fb816103b6565b811461040657600080fd5b50565b600081359050610418816103f2565b92915050565b60006020828403121561043457610433610338565b5b600061044284828501610409565b9150509291505056fea2646970667358221220422ef2b6ba27ca9db2b68738685adc9c9905dc5ac9a0f6a8892b58efcb50edc064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Test1.sol:Test1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 193,
        "contract": "contracts/Test1.sol:Test1",
        "label": "storedValue",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}